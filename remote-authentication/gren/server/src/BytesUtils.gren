module BytesUtils exposing (..)

import Bytes exposing (Bytes)
import Bytes.Decode as BytesDecode
import Math

bytesToHex : Bytes -> String
bytesToHex bytes =
    let
        byteToHex : Int -> String
        byteToHex byte =
            let
                toHexDigit n =
                    if n < 10 then
                        String.fromInt n
                    else
                        when n is
                            10 -> "a"
                            11 -> "b"
                            12 -> "c"
                            13 -> "d"
                            14 -> "e"
                            15 -> "f"
                            _ -> "0"
                high = byte // 16
                low = Math.modBy 16 byte
            in
                toHexDigit high ++ toHexDigit low

        buildHexString : Int -> BytesDecode.Decoder String
        buildHexString remaining =
            if remaining <= 0 then
                BytesDecode.succeed ""
            else
                BytesDecode.map2 (\byte rest -> byteToHex byte ++ rest)
                    BytesDecode.unsignedInt8
                    (buildHexString (remaining - 1))

        decoder = buildHexString (Bytes.length bytes)
    in
        when BytesDecode.decode decoder bytes is
            Just hexString -> hexString
            Nothing -> ""
