module Main exposing (..)

import Browser
import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (..)
import Json.Decode as Decode
import Process
import Task
import Time

type ViewState
    = Start
    | Load
    | Done


type Action
    = DoStart
    | DoLoad
    | DoDone


type alias Model =
    { viewState : ViewState
    }


defaultModel =
    { viewState = Start
    }



-- styles =
--     { colors =
--         { lightGreen = Css.rgb 212 238 172
--         , darkGreen = Css.rgb 140 176 86
--         }
--     }


init _ =
    {model=defaultModel, command=Cmd.none}


visibilityHelper state =
    let
        display =
            if state then
                "visible"
            else
                "hidden"
    in
        Html.Attributes.style "visibility" display


loadingDelay =
    4000


view : Model -> Browser.Document Action
view model =
    let
        state =
            when model.viewState is
                Start ->
                    "Start"

                Load ->
                    "Load"

                Done ->
                    "Done"

        start =
            div
                [
                    (visibilityHelper (model.viewState == Start)),
                    -- Html.Styled.Attributes.css[ Css.color styles.colors.lightGreen, Css.cursor Css.pointer, Css.fontFamily Css.sansSerif, Css.fontSize (Css.rem 4), Css.left (Css.px 0), Css.position Css.fixed, Css.right (Css.px 0), Css.textAlign Css.center, Css.top (Css.pct 50), Css.transform (Css.translateY (Css.pct -50))]--,
                    -- Html.Styled.Events.onClick DoLoad,
                    Html.Events.onClick DoLoad
                ]
                [ text "Click to start!" ]

        loading =
            div
                [ (visibilityHelper (model.viewState == Load))
                , Html.Attributes.class
                    (if (model.viewState == Load) then
                        "loading"
                     else
                        ""
                    )
                    , style "animation-duration" (
                        if (model.viewState == Load) then
                            ((String.fromInt loadingDelay) ++"ms")
                        else
                            ""
                    )
                -- , Html.Styled.Attributes.css
                --     [ Css.color styles.colors.lightGreen
                --     , Css.fontFamily Css.sansSerif
                --     , Css.fontSize (Css.rem 4)
                --     , Css.left (Css.px 0)
                --     , Css.position Css.fixed
                --     , Css.right (Css.px 0)
                --     , Css.textAlign Css.center
                --     , Css.top (Css.pct 50)
                --     , Css.transform (Css.translateY (Css.pct -50))
                --     , Css.Transitions.transition
                --         [ Css.Transitions.color3 loadingDelay 0 Css.Transitions.linear ]
                --     , Css.Global.withClass "loading"
                --         [ Css.color styles.colors.darkGreen
                --         ]
                --     ]
                ]
                [ p [] [ text "Loading ..." ]
                , span
                    [
                        -- Html.Styled.Attributes.css [ Css.fontSize (Css.rem 1) ]
                    ]
                    [ text "(Note: State transition is kept in sync with CSS transition!)" ]
                ]

        done =
            div
                [ (visibilityHelper (model.viewState == Done))
                -- , Html.Styled.Attributes.css
                --     [ Css.color styles.colors.lightGreen
                --     , Css.fontFamily Css.sansSerif
                --     , Css.fontSize (Css.rem 4)
                --     , Css.left (Css.px 0)
                --     , Css.position Css.fixed
                --     , Css.right (Css.px 0)
                --     , Css.textAlign Css.center
                --     , Css.top (Css.pct 50)
                --     , Css.transform (Css.translateY (Css.pct -50))
                --     ]
                ]
                [
                    -- Html.Styled.text "Done!"
                    text "Done!"
                ]

        body_ = [div
                    []
                    [
                        div
                        []
                        [
                            start
                            , loading
                            , done
                        ]
                    ]]
    in
        { body = body_, title = state }


delay time msg =
    Process.sleep time
        |> Task.perform (\_ -> msg)


update msg model =
    when msg is
        DoStart ->
            {model={ model | viewState = Start }, command=Cmd.none}

        DoLoad ->
            {model={ model | viewState = Load }, command=(delay loadingDelay DoDone)}

        DoDone ->
            {model={ model | viewState = Done }, command=Cmd.none}


type alias Flags =
    {}


main : Program Flags Model Action
main =
    Browser.document
        { init = init
        , subscriptions = \_ -> Sub.none
        , update = update
        , view = view
        }
